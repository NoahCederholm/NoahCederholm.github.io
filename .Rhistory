hjust = -.1, size=5) + #<<
transition_reveal(date)
df %>%
filter(Country_code %in% c('US','IN','BR')) %>%
ggplot(aes(y=Cumulative_deaths,
x=date,
color=Country_code))+
geom_line()+
geom_point(size=3)+
geom_text(aes(label = positive),
hjust = -.1, size=5) + #<<
transition_reveal(date)
df %>%
filter(Country_code %in% c('US','IN','BR')) %>%
ggplot(aes(y=Cumulative_deaths,
x=date,
color=Country_code))+
geom_line()+
geom_point(size=3)+
transition_reveal(date)
df %>%
filter(Country_code %in% c('US','IN','BR')) %>%
ggplot(aes(y=Cumulative_deaths,
x=Date_reported,
color=Country_code))+
geom_line()+
geom_point(size=3)+
transition_reveal(date)
df %>%
filter(Country_code %in% c('US','IN','BR')) %>%
ggplot(aes(y=Cumulative_deaths,
x=Date_reported,
color=Country_code))+
geom_line()+
geom_point(size=3)+
geom_text(aes(label = positive),
hjust = -.1, size=5) + #<<
transition_reveal(Date_reported)
df %>%
filter(Country_code %in% c('US','IN','BR')) %>%
ggplot(aes(y=Cumulative_deaths,
x=Date_reported,
color=Country_code))+
geom_line()+
geom_point(size=3)+
geom_text(aes(label = Cumulative_deaths),
hjust = -.1, size=5) + #<<
transition_reveal(Date_reported)
df$death_per_cases <- df$Cumulative_deaths / df$Cumulative_cases
df %>% filter(Date_reported == '2020-11-16') %>% arrange(-death_per_cases)
df %>%
filter(Country_code %in% c('US','IT','MX')) %>%
ggplot(aes(y=death_per_cases,
x=Date_reported,
color=Country_code))+
geom_line()+
geom_point(size=3)+
geom_text(aes(label = death_per_cases),
hjust = -.1, size=5) + #<<
transition_reveal(death_per_cases)
df %>%
filter(Country_code %in% c('US','IT','MX')) %>%
ggplot(aes(y=death_per_cases,
x=Date_reported,
color=Country_code))+
geom_line()+
geom_point(size=3)+
geom_text(aes(label = death_per_cases),
hjust = -.1, size=5) + #<<
transition_reveal(death_per_cases)
df %>%
filter(Country_code %in% c('US','IT','MX')) %>%
ggplot(aes(y=death_per_cases,
x=Date_reported,
color=Country_code))+
geom_line()+
geom_point(size=3)+
#geom_text(aes(label = death_per_cases),
# hjust = -.1, size=5) + #<<
transition_reveal(death_per_cases)
df %>%
filter(Country_code %in% c('US','IT','MX')) %>%
ggplot(aes(y=death_per_cases,
x=Date_reported,
color=Country_code))+
geom_line()+
geom_point(size=3)+
geom_text(aes(label = death_per_cases),
hjust = -.1, size=5) + #<<
transition_reveal(Date_reported)
install.packages('mlbench')
knitr::opts_chunk$set(message = FALSE)
library(mlbench)
data(PimaIndiansDiabetes)
df <- PimaIndiansDiabetes
View(df)
View(df)
library(mlbench)
library(gapminder)
library(gganimate)
library(ggplot2)
library(tidyverse)
library(lubridate)
library(knitr)
data(PimaIndiansDiabetes)
df <- PimaIndiansDiabetes
names(df)[9] <- 'target'
splitIndex <- createDataPartition(df$target, p = .80,
list = FALSE)
library(mlbench)
library(gapminder)
library(gganimate)
library(ggplot2)
library(tidyverse)
library(lubridate)
library(knitr)
library(caret)
data(PimaIndiansDiabetes)
df <- PimaIndiansDiabetes
set.seed(2020)
names(df)[9] <- 'target'
splitIndex <- createDataPartition(df$target, p = .80,
list = FALSE)
df_train <- df[ splitIndex,]
df_test <- df[-splitIndex,]
library(rpart)
library(rpart)
tree_model <- rpart(target ~ ., data = df_train,
control = rpart.control(maxdepth = 3))
View(tree_model)
View(tree_model)
library(rattle)
fancyRpartPlot(tree_model)
tree_model$variable.importance
barplot(tree_model$variable.importance)
pred <- predict(tree_model, df_test, type = "class")
pred <- predict(tree_model, df_test, type = "class")
cm <- confusionMatrix(data = pred, reference = df_test$target, positive = "1")
pred <- predict(tree_model, df_test, type = "class")
cm <- confusionMatrix(data = pred, reference = df_test$target, positive = "pos")
cm$overall[1]
library(randomForest)
forest_model = randomForest(target ~ ., data=df_train, ntree = 1000)
pred <- predict(forest_model, df_test, type = "class")
cm <- confusionMatrix(data = pred, reference = df_test$target, positive = "1")
library(randomForest)
forest_model = randomForest(target ~ ., data=df_train, ntree = 1000)
pred <- predict(forest_model, df_test, type = "class")
cm <- confusionMatrix(data = pred, reference = df_test$target, positive = "pos")
cm$overall[1]
library(randomForest)
forest_model = randomForest(target ~ ., data=df_train, ntree = 1000)
pred <- predict(forest_model, df_test, type = "class")
importance(forest_model)
cm <- confusionMatrix(data = pred, reference = df_test$target, positive = "pos")
cm$overall[1]
forest_model2 = randomForest(target ~ ., data=df_train, ntree = 2000)
pred2 <- predict(forest_model, df_test, type = "class")
cm <- confusionMatrix(data = pred, reference = df_test$target, positive = "pos")
cm$overall[1]
cm <- confusionMatrix(data = pred2, reference = df_test$target, positive = "pos")
cm$overall[1]
library(randomForest)
forest_model = randomForest(target ~ ., data=df_train, ntree = 1000)
pred <- predict(forest_model, df_test, type = "class")
cm <- confusionMatrix(data = pred, reference = df_test$target, positive = "pos")
cm$overall[1]
forest_model2 = randomForest(target ~ ., data=df_train, ntree = 2000)
pred2 <- predict(forest_model, df_test, type = "class")
cm <- confusionMatrix(data = pred, reference = df_test$target, positive = "pos")
cm$overall[1]
cm2 <- confusionMatrix(data = pred2, reference = df_test$target, positive = "pos")
cm2$overall[1]
forest_model2 = randomForest(target ~ ., data=df_train, ntree = 2000)
pred2 <- predict(forest_model2, df_test, type = "class")
cm <- confusionMatrix(data = pred, reference = df_test$target, positive = "pos")
cm$overall[1]
cm2 <- confusionMatrix(data = pred2, reference = df_test$target, positive = "pos")
cm2$overall[1]
predtree <- predict(tree_model, df_test, type = "class")
cm1 <- confusionMatrix(data = predtree, reference = df_test$target, positive = "pos")
cm1$overall[1]
cm1 <- confusionMatrix(data = predtree, reference = df_test$target, positive = "pos")
cm1$overall[1]
cm <- confusionMatrix(data = pred, reference = df_test$target, positive = "pos")
cm$overall[1]
model1 <- train(target~., data=df_train,
method = "rpart2", #<<
maxdepth=3)
pred <- predict(model1, df_test)
cm <- confusionMatrix(data = pred, reference = df_test$target, positive = "1")
model1 <- train(target~., data=df_train,
method = "rpart2", #<<
maxdepth=3)
pred <- predict(model1, df_test)
cm <- confusionMatrix(data = pred, reference = df_test$target, positive = "pos")
cm$overall[1]
model2 <- train(target~., data=df_train,
method = "rf", #<<
ntree = 1000)
pred <- predict(model2, df_test)
cm <- confusionMatrix(data = pred, reference = df_test$target, positive = "pos")
cm$overall[1]
plot(varImp(model1))
plot(varImp(model2))
knitr::opts_chunk$set(message = FALSE)
library(mlbench)
library(gapminder)
library(gganimate)
library(ggplot2)
library(tidyverse)
library(lubridate)
library(knitr)
library(caret)
data(PimaIndiansDiabetes)
df <- PimaIndiansDiabetes
splitIndex <- createDataPartition(df$target, p = .80,
list = FALSE)
library(mlbench)
library(gapminder)
library(gganimate)
library(ggplot2)
library(tidyverse)
library(lubridate)
library(knitr)
library(caret)
data(PimaIndiansDiabetes)
df <- PimaIndiansDiabetes
set.seed(2020)
splitIndex <- createDataPartition(df$diabetes, p = .80,
list = FALSE)
df_train <- df[ splitIndex,]
df_test <- df[-splitIndex,]
splitIndex <- createDataPartition(df$diabetes, p = .80,
list = FALSE)
df_train <- df[ splitIndex,]
df_test <- df[-splitIndex,]
tuneGrid = expand.grid(maxdepth = 2:10)
trControl = trainControl(method = "cv",
number = 10)
tree_approach3 <- train(target~., data=df_train,
method = "rpart2",
trControl = trControl,
tuneGrid = tuneGrid)
tuneGrid = expand.grid(maxdepth = 2:10)
trControl = trainControl(method = "cv",
number = 10)
tree_approach3 <- train(diabetes~., data=df_train,
method = "rpart2",
trControl = trControl,
tuneGrid = tuneGrid)
tuneGrid = expand.grid(maxdepth = 2:10)
trControl = trainControl(method = "cv",
number = 10)
tree_approach3 <- train(diabetes~., data=df_train,
method = "rpart2",
trControl = trControl,
tuneGrid = tuneGrid)
plot(tree_approach3)
tuneGrid = expand.grid(maxdepth = 2:10)
trControl = trainControl(method = "cv",
number = 10)
tree_depth <- train(diabetes~., data=df_train,
method = "rpart2",
trControl = trControl,
tuneGrid = tuneGrid)
plot(tree_depth)
tuneGrid = expand.grid(maxdepth = 2:10)
trControl = trainControl(method = "cv",
number = 10)
tree_depth <- train(diabetes~., data=df_train,
method = "rpart2",
trControl = trControl,
tuneGrid = tuneGrid)
plot(tree_depth)
tuneGrid = expand.grid(maxdepth = 2:10)
trControl = trainControl(method = "cv",
number = 10)
tree_depth <- train(diabetes~., data=df_train,
method = "rpart2",
trControl = trControl,
tuneGrid = tuneGrid)
plot(tree_depth)
tuneGrid = expand.grid(maxdepth = 1:10)
trControl = trainControl(method = "cv",
number = 10)
tree_depth <- train(diabetes~., data=df_train,
method = "rpart2",
trControl = trControl,
tuneGrid = tuneGrid)
plot(tree_depth)
tuneGrid = expand.grid(maxdepth = 1:10)
trControl = trainControl(method = "cv",
number = 10)
tree_depth <- train(diabetes~., data=df_train,
method = "rpart2",
trControl = trControl,
tuneGrid = tuneGrid)
plot(tree_depth)
tuneGrid = expand.grid(maxdepth = 3)
tree_depth_3 <- train(target~., data=df_train,
method = "rpart2",
tuneGrid = tuneGrid)
tuneGrid = expand.grid(maxdepth = 3)
tree_depth_3 <- train(diabetes~., data=df_train,
method = "rpart2",
tuneGrid = tuneGrid)
pred <- predict(tree_depth_3, df_test)
cm <- confusionMatrix(data = pred, reference = df_test$target, positive = "pos")
tuneGrid = expand.grid(maxdepth = 3)
tree_depth_3 <- train(diabetes~., data=df_train,
method = "rpart2",
tuneGrid = tuneGrid)
pred <- predict(tree_depth_3, df_test)
cm <- confusionMatrix(data = pred, reference = df_test$diabetes, positive = "pos")
cm$overall[1]
set.seed(2020)
tuneGrid = expand.grid(maxdepth = 1:10)
trControl = trainControl(method = "cv",
number = 10)
tree_depth <- train(diabetes~., data=df_train,
method = "rpart2",
trControl = trControl,
tuneGrid = tuneGrid)
plot(tree_depth)
tuneGrid = expand.grid(maxdepth = 1:10)
trControl = trainControl(method = "cv",
number = 10)
tree_depth <- train(diabetes~., data=df_train,
method = "rpart2",
trControl = trControl,
tuneGrid = tuneGrid)
plot(tree_depth)
tuneGrid = expand.grid(maxdepth = 1:10)
trControl = trainControl(method = "cv",
number = 10)
tree_depth <- train(diabetes~., data=df_train,
method = "rpart2",
trControl = trControl,
tuneGrid = tuneGrid)
plot(tree_depth)
tuneGrid = expand.grid(maxdepth = 1:10)
trControl = trainControl(method = "cv",
number = 10)
tree_depth <- train(diabetes~., data=df_train,
method = "rpart2",
trControl = trControl,
tuneGrid = tuneGrid)
plot(tree_depth)
set.seed(1)
splitIndex <- createDataPartition(df$diabetes, p = .80,
list = FALSE)
df_train <- df[ splitIndex,]
df_test <- df[-splitIndex,]
tuneGrid = expand.grid(maxdepth = 1:10)
trControl = trainControl(method = "cv",
number = 10)
tree_depth <- train(diabetes~., data=df_train,
method = "rpart2",
trControl = trControl,
tuneGrid = tuneGrid)
plot(tree_depth)
tuneGrid = expand.grid(maxdepth = 1:10)
trControl = trainControl(method = "cv",
number = 10)
tree_depth <- train(diabetes~., data=df_train,
method = "rpart2",
trControl = trControl,
tuneGrid = tuneGrid)
plot(tree_depth)
tuneGrid = expand.grid(maxdepth = 1:10)
trControl = trainControl(method = "cv",
number = 10)
tree_depth <- train(diabetes~., data=df_train,
method = "rpart2",
trControl = trControl,
tuneGrid = tuneGrid)
plot(tree_depth)
tuneGrid = expand.grid(maxdepth = 1:10)
trControl = trainControl(method = "cv",
number = 10)
tree_depth <- train(diabetes~., data=df_train,
method = "rpart2",
trControl = trControl,
tuneGrid = tuneGrid)
plot(tree_depth)
tuneGrid = expand.grid(maxdepth = 1:10)
trControl = trainControl(method = "cv",
number = 10)
tree_depth <- train(diabetes~., data=df_train,
method = "rpart2",
trControl = trControl,
tuneGrid = tuneGrid)
plot(tree_depth)
set.seed(2020)
tuneGrid = expand.grid(maxdepth = 1:10)
trControl = trainControl(method = "cv",
number = 10)
tree_depth <- train(diabetes~., data=df_train,
method = "rpart2",
trControl = trControl,
tuneGrid = tuneGrid)
plot(tree_depth)
tuneGrid = expand.grid(maxdepth = 1:10)
trControl = trainControl(method = "cv",
number = 10)
tree_depth <- train(diabetes~., data=df_train,
method = "rpart2",
trControl = trControl,
tuneGrid = tuneGrid)
plot(tree_depth)
tuneGrid = expand.grid(maxdepth = 1:10)
trControl = trainControl(method = "cv",
number = 10)
tree_depth <- train(diabetes~., data=df_train,
method = "rpart2",
trControl = trControl,
tuneGrid = tuneGrid)
plot(tree_depth)
tuneGrid = expand.grid(maxdepth = 1:10)
trControl = trainControl(method = "LGOCV",
number = 10)
tree_depth2 <- train(diabetes~., data=df_train,
method = "rpart2",
trControl = trControl,
tuneGrid = tuneGrid)
tuneGrid = expand.grid(maxdepth = 1:10)
trControl = trainControl(method = "LGOCV",
number = 10)
tree_depth2 <- train(diabetes~., data=df_train,
method = "rpart2",
trControl = trControl,
tuneGrid = tuneGrid)
plot(tree_depth2)
tuneGrid = expand.grid(maxdepth = 1:10)
trControl = trainControl(method = "LGOCV",
number = 10)
tree_depth2 <- train(diabetes~., data=df_train,
method = "rpart2",
trControl = trControl,
tuneGrid = tuneGrid)
plot(tree_depth2)
tuneGrid = expand.grid(maxdepth = 1:10)
trControl = trainControl(method = "LGOCV",
number = 10)
tree_depth2 <- train(diabetes~., data=df_train,
method = "rpart2",
trControl = trControl,
tuneGrid = tuneGrid)
plot(tree_depth2)
knitr::opts_chunk$set(message = FALSE)
library(mlbench)
library(gapminder)
library(gganimate)
library(ggplot2)
library(tidyverse)
library(lubridate)
library(knitr)
library(caret)
data(PimaIndiansDiabetes)
df <- PimaIndiansDiabetes
set.seed(2020)
splitIndex <- createDataPartition(df$diabetes, p = .80,
list = FALSE)
df_train <- df[ splitIndex,]
df_test <- df[-splitIndex,]
install.packages(shiny)
install.packages(packrat)
install.packages(rsconnect)
install.packages('shiny')
install.packages('packrat')
install.packages('rsconnect')
library(rsconnect)
library(shiny)
library(packrat)
runApp('GitHub/NoahCederholm.github.io/shiny')
runApp('GitHub/NoahCederholm.github.io/shiny')
rsconnect::setAccountInfo(name='noahcederholm',
token='6860154F77799F376B98A75D820BE42C',
secret='<SECRET>')
runApp('GitHub/NoahCederholm.github.io/shiny')
library(shiny); runApp('C:/Users/student/Downloads/c1.R')
runApp('GitHub/NoahCederholm.github.io/shiny')
runApp('~/GitHub/NoahCederholm.github.io/Q2/Q2.r')
runApp('GitHub/NoahCederholm.github.io/Q2/Q2.r')
runApp('GitHub/NoahCederholm.github.io/Q2/Q2.r')
runApp('GitHub/NoahCederholm.github.io/Q2/Q2.r')
runApp('GitHub/NoahCederholm.github.io/Q2/Q2.r')
runApp('GitHub/NoahCederholm.github.io/Q2/Q2.r')
runApp('GitHub/NoahCederholm.github.io/Q2/Q2.r')
runApp('GitHub/NoahCederholm.github.io/Q2/Q2.r')
runApp('GitHub/NoahCederholm.github.io/Q2/Q2.r')
runApp('GitHub/NoahCederholm.github.io/Q2/Q2.r')
runApp('GitHub/NoahCederholm.github.io/Q2/Q2.r')
runApp('GitHub/NoahCederholm.github.io/Q2/Q2.r')
runApp('GitHub/NoahCederholm.github.io/Q2/Q2.r')
runApp('GitHub/NoahCederholm.github.io/Q2/Q2.r')
runApp('GitHub/NoahCederholm.github.io/Q2/Q2.r')
runApp('GitHub/NoahCederholm.github.io/Q2/Q2.r')
setwd("~/GitHub/NoahCederholm.github.io")
runApp('Q2/Q2.r')
setwd("~/GitHub/NoahCederholm.github.io")
runApp('Q2/Q2.r')
runApp('Q2/Q2.r')
runApp('Q2/Q2.r')
runApp('Q2')
runApp('Q2')
runApp('question2')
runApp('question2')
runApp()
runApp()
runApp('C:/Users/student/Downloads/a3.R')
